{"version":3,"sources":["lib/BuildTypes.ts","lib/ParseResponse.ts","lib/Rank.ts","lib/useQuery.ts","BuildingSearch.tsx","lib/useBuildBreakdown.ts","BuildList.tsx","App.tsx","index.js"],"names":["BuildType","Rank","parseWeaponResponse","obj","materialList","crafting","craftable","craftingMaterials","upgradeMaterials","previous","branches","map","cost","quantity","itemID","item","id","itemName","name","type","rarity","parseArmorResponse","materials","parseCharmResponse","ranks","rank","level","ROUTE_LUT","getBuildTypeURL","buildType","QUERY_SEARCH_BY_NAME","query","useQuery","parsingFunction","useState","setQuery","loading","setLoading","result","setResult","lookupQuery","a","undefined","urlStart","url","concat","fetch","response","json","console","log","finalResult","singleResult","aggResult","setAggResult","weapon","Weapon","armor","Armor","charm","Charm","callLookups","queue","Promise","all","results","getBackgroundColor","selected","selectedMod","text","Low","High","Master","BuildListElement","isSelected","onClick","Card","className","isLowRank","isHighRank","Body","Row","Col","tag","BuildingSearch","lookup","selectedItems","setSelectedItems","history","useHistory","debouncedLookup","useRef","debounce","current","Loading","Spinner","animation","weapons","charms","Math","max","aggList","sort","b","ensuredSelected","selectedKeys","Object","keys","SelectedList","key","Number","taggedPair","ListGroup","Item","SelectedCard","length","Header","variant","Footer","Button","block","push","queries","charAt","join","buildQueryURL","BuildList","list","selectedList","listMapper","selectedCopy","toggleItemSelect","InputGroup","size","FormControl","aria-label","aria-describedby","onChange","event","target","value","getDBItem","getWeapon","getArmor","getCharm","getWeaponTree","runningList","newList","createGatherOrder","materialTiers","createSteps","plan","craftingList","step","rest","completionList","nameLut","quantityTable","forEach","newRest","currStep","material","compactedList","compact","compactedRest","finalBuildStepItems","buildStep","build","gather","reverse","index","getMaterialPlan","builds","weaponBuilds","filter","weaponIDs","weaponPromises","weaponTrees","expandedWeaponTree","reduce","prev","curr","armorBuilds","armorIDs","armorPromises","armorPieces","armors","charmBuilds","charmIDs","charmPromises","charmTrees","expandedTrees","tree","expandedTree","raritySort","lengthSort","materialSteps","tier","gatherOrder","detailedPlan","TYPE_LUT","BuildStepCard","stepNum","useEffect","getMaterials","buildPlan","useBuildBreakdown","useParams","split","singleQuery","substring","stepCards","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bca8700.chunk.js","sourcesContent":["import { Rank } from \"./Rank\";\n\nexport enum BuildType {\n  Weapon = 'Weapon',\n  Armor = 'Armor',\n  Charm = 'Charm'\n}\n\nexport interface CraftingMaterial {\n  itemID: number\n  itemName: string\n  quantity: number\n}\n\nexport interface WeaponCrafting {\n  craftable: boolean\n  previous?: number\n  branches: number[]\n  craftingMaterials: CraftingMaterial[]\n}\n\nexport interface BasicBuildType { \n  id: number\n  name: string\n  type: string\n}\n\nexport interface RarityBuildType extends BasicBuildType { \n  rarity: number\n}\n\nexport interface CraftWithRarity extends RarityBuildType {\n  crafting: CraftingMaterial[]\n}\n\nexport interface WeaponType extends RarityBuildType {\n  crafting: WeaponCrafting\n}\n\nexport interface ArmorType extends RarityBuildType  {\n  crafting: CraftingMaterial[]\n}\n\nexport interface CharmRank {\n  level: number\n  rarity: number\n  crafting: CraftingMaterial[]\n}\n\nexport interface CharmType extends BasicBuildType {\n  ranks: CharmRank[]\n}\n\nexport interface CharmItem extends RarityBuildType {}\n\nexport interface RewardCondition {\n  type: string\n  subtype?: string\n  rank: Rank\n  quantity: number\n  change: number\n}\n\nexport type GatheredCraftingMaterial = CraftingMaterial | HuntedCraftingMaterial\n\nexport interface HuntedCraftingMaterial extends CraftingMaterial {\n  monsterId: number\n  monsterName: string\n  gatherMethods: RewardCondition[]\n}\n\nexport interface TierMaterials {\n  name: string\n  rarity: number\n  monstersNeeded: string[]\n  materials: GatheredCraftingMaterial[]\n}\n\nexport interface MonsterDrop {\n  itemID: number\n  itemName: string\n  conditions: RewardCondition[]\n}\n\nexport interface Monster {\n  id: number\n  name: string\n  rewards: MonsterDrop[]\n}","import { WeaponType, WeaponCrafting, CraftingMaterial, ArmorType, CharmType, CharmRank } from \"./BuildTypes\";\n\nexport const parseWeaponResponse = (obj: any) : WeaponType => {\n  const materialList = obj.crafting?.craftable ? obj.crafting?.craftingMaterials : obj.crafting?.upgradeMaterials\n\n  const crafting: WeaponCrafting = {\n    previous: obj.crafting?.previous,\n    branches: obj.crafting?.branches,\n    craftable: obj.crafting?.craftable,\n    craftingMaterials: materialList.map((cost: any): CraftingMaterial => ({\n      quantity: cost.quantity,\n      itemID: cost.item?.id,\n      itemName: cost.item?.name\n    }))\n  }\n\n  return {\n    id: obj.id,\n    name: obj.name,\n    type: obj.type,\n    rarity: obj.rarity,\n    crafting\n  }\n}\n\nexport const parseArmorResponse = (obj: any): ArmorType => ({\n    id: obj.id,\n    name: obj.name,\n    rarity: obj.rarity,\n    type: obj.type,\n    crafting: obj.crafting?.materials.map((cost: any): CraftingMaterial => ({\n      quantity: cost.quantity,\n      itemID: cost.item?.id,\n      itemName: cost.item?.name\n    }))\n  })\n\n\nexport const parseCharmResponse = (obj: any): CharmType => {\n  const ranks = obj.ranks.map((rank: any): CharmRank => {\n    return {\n      level: rank.level,\n      rarity: rank.rarity,\n      crafting: rank.crafting?.materials?.map((cost: any): CraftingMaterial => ({\n        quantity: cost.quantity,\n        itemID: cost.item?.id,\n        itemName: cost.item?.name\n      }))\n    }\n  })\n\n  return {\n    id: obj.id,\n    name: obj.name,\n    type: 'charm',\n    ranks: ranks\n  }\n}","\nexport enum Rank {\n  Low = \"low\", High = \"high\", Master = \"master\"\n}\n\nexport const isLowRank = (rarity: number) => rarity < 5\nexport const isHighRank = (rarity: number) => rarity >= 5 && rarity < 9\nexport const isMasterRank = (rarity: number) => rarity >= 9\n\nexport const getRank = (rarity: number): Rank => {\n  if (isLowRank(rarity))\n    return Rank.Low\n\n  if (isHighRank(rarity))\n    return Rank.High\n\n  return Rank.Master\n}","import {useState} from 'react'\nimport { BuildType, WeaponType, ArmorType, CharmType } from './BuildTypes'\nimport { parseWeaponResponse, parseArmorResponse, parseCharmResponse } from './ParseResponse'\n\ninterface RouteLUT {\n  [key: string]: string\n}\n\nexport const ROUTE_LUT: RouteLUT = {\n  'Weapon': 'https://mhw-db.com/weapons',\n  'Armor': 'https://mhw-db.com/armor',\n  'Charm': 'https://mhw-db.com/charms'\n}\n\nexport const getBuildTypeURL = (buildType: BuildType): string => ROUTE_LUT[buildType]\n\nconst QUERY_SEARCH_BY_NAME = (query: string) => `?q={\"name\": {\"$like\":\"${query}%\"}}`\n\ntype UseQueryHook<T> = [boolean, string, (query: string) => Promise<T[]>, T[]?]\n\nconst useQuery = <T>(type: BuildType, parsingFunction: (json: any) => T): UseQueryHook<T> => {\n  const [query, setQuery] = useState<string>('')\n  const [loading, setLoading] = useState<boolean>(false)\n  const [result, setResult] = useState<T[]>()\n\n  const lookup = async (lookupQuery: string): Promise<T[]> => {\n    if (lookupQuery === '') {\n      setQuery('')\n      setResult(undefined)\n      setLoading(false)\n      return []\n    }\n\n    setLoading(true)\n    setQuery(lookupQuery)\n\n    const urlStart = getBuildTypeURL(type)\n    const url = urlStart.concat(QUERY_SEARCH_BY_NAME(lookupQuery))\n    const response = await fetch(url)\n    const json: any[] = await response.json()\n\n    console.log(json)\n    const finalResult = json.map((singleResult: any): T => parsingFunction(singleResult))\n    setResult(finalResult)\n    setLoading(false)\n\n    return finalResult \n  }\n\n  return [loading, query, lookup, result]\n}\n\nexport const useWeaponQuery = () => useQuery<WeaponType>(BuildType.Weapon, parseWeaponResponse)\nexport const useArmorQuery = () => useQuery<ArmorType>(BuildType.Armor, parseArmorResponse)\nexport const useCharmQuery = () => useQuery<CharmType>(BuildType.Charm, parseCharmResponse)\n\ninterface AggregateType {\n  weapon?: WeaponType[],\n  armor?: ArmorType[],\n  charm?: CharmType[]\n}\ntype UseAggQueryHook = [boolean, string, (query: string) => void, AggregateType?]\n\nexport default (): UseAggQueryHook => {\n  const [aggResult, setAggResult] = useState<AggregateType>()\n  const [query, setQuery] = useState<string>('')\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const weapon = useWeaponQuery()\n  const armor = useArmorQuery()\n  const charm = useCharmQuery()\n\n  const lookup = (lookupQuery: string) => {\n    setLoading(true)\n    setQuery(lookupQuery)\n    callLookups(lookupQuery)\n  }\n\n  const callLookups = async (lookupQuery: string) => {\n    const queue = Promise.all([\n      weapon[2](lookupQuery),\n      armor[2](lookupQuery),\n      charm[2](lookupQuery),\n    ])\n    const results = await queue\n\n    setAggResult({\n      weapon: results[0],\n      armor: results[1],\n      charm: results[2]\n    })\n    setLoading(false)\n  }\n\n  return [loading, query, lookup, aggResult]\n}","import React, { useRef, useState } from 'react'\nimport { InputGroup, FormControl, Spinner, Card, Row, Col, ListGroup, Button } from 'react-bootstrap';\nimport debounce from 'lodash/debounce'\nimport useQuery from './lib/useQuery';\nimport { RarityBuildType, CharmType, CharmItem } from './lib/BuildTypes';\nimport { Rank, getRank } from './lib/Rank';\nimport { useHistory } from 'react-router-dom';\n\ninterface BuildListElementProps {\n  item: RarityBuildType\n  onClick: () => void\n  isSelected: boolean\n}\n\ninterface SelectedMap {\n  [itemID: number]: Tagged<RarityBuildType>\n}\n\nconst getQueryPrefix = (type: string): string => {\n  return type.charAt(0)\n}\n\nconst getBackgroundColor = (selected: boolean, rank: Rank): string => {\n  const selectedMod = (text: string) => selected ? `${text}-active` : text\n  switch (rank) {\n    case Rank.Low: return selectedMod('low-rank-bg')\n    case Rank.High: return selectedMod('high-rank-bg')\n    case Rank.Master: return selectedMod('master-rank-bg')\n  }\n}\n\nconst BuildListElement = ({item, isSelected, onClick}: BuildListElementProps) => {\n  return (\n    <Card className={`my-3 ${getBackgroundColor(isSelected, getRank(item.rarity))}`} onClick={onClick}>\n      <Card.Body>\n        <Row>\n          <Col className={'text-left text-capitalize'}>\n            {item.name}\n          </Col>\n          <Col className={'text-right text-capitalize'}>\n            {item.type} | {item.rarity}\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  )\n}\n\nconst charmListToCharmItems = (list: CharmType[]): CharmItem[] => list.map((item) => ({\n  name: item.name,\n  id: item.id,\n  type: item.type,\n  rarity: Math.max(...item.ranks.map((rank) => rank.rarity))\n}))\ntype Tagged<T> = [T, string]\n\nconst listMapper = (list: Tagged<RarityBuildType>[], selectedList: SelectedMap, onClick: (item: Tagged<RarityBuildType>) => void) => \n  list.map((item) => <BuildListElement isSelected={selectedList[item[0].id] !== undefined} item={item[0]} onClick={() => onClick(item)} />)\nconst tag = (item: any, tag: string): Tagged<typeof item> => [item, tag]\n\nconst BuildingSearch = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [loading, query, lookup, result] = useQuery()\n  const [selectedItems, setSelectedItems] = useState<SelectedMap>()\n  const history = useHistory()\n\n  const debouncedLookup = useRef(debounce(lookup, 500)).current\n  const Loading = loading ? <Spinner animation=\"border\" /> : null\n\n  const weapons = result?.weapon || []\n  const armor = result?.armor || []\n  const charms = result?.charm ? charmListToCharmItems(result?.charm) : []\n\n  const aggList = [\n    ...weapons.map((item) => tag(item, 'weapons')),\n    ...armor.map((item) => tag(item, 'armor')),\n    ...charms.map((item) => tag(item, 'charms')),\n  ]\n\n  aggList.sort((a: Tagged<RarityBuildType>, b: Tagged<RarityBuildType>) => a[0].rarity - b[0].rarity)\n\n  const toggleItemSelect = (item: Tagged<RarityBuildType>) => {\n    const selectedCopy: SelectedMap = {...selectedItems}\n    const itemID = item[0].id\n    if (selectedCopy[itemID]) {\n      delete selectedCopy[itemID]\n      setSelectedItems(selectedCopy)\n      return\n    }\n\n    selectedCopy[itemID] = item\n    setSelectedItems(selectedCopy)\n    return\n  }\n\n  const ensuredSelected = selectedItems || {}\n  const buildQueryURL = (): string => {\n    const queries = Object.keys(ensuredSelected).map((key) => {\n      const id = Number(key)\n      const taggedPair = ensuredSelected[id]\n      return `${getQueryPrefix(taggedPair[1])}${id}`\n    })\n\n    return `/mhw-farmhand/${queries.join('+')}`\n  }\n\n  const selectedKeys = Object.keys(ensuredSelected)\n  const SelectedList = selectedKeys.map((key) => {\n    const id = Number(key)\n    const taggedPair = ensuredSelected[id]\n    return (\n      <ListGroup.Item>{taggedPair[0].name}</ListGroup.Item>\n    )\n  })\n\n  const SelectedCard = selectedKeys.length === 0 ? null :\n    <Card className=\"sticky-top mt-4\">\n      <Card.Header>Build List</Card.Header>\n      <Card.Body>\n        <ListGroup variant=\"flush\">\n          {SelectedList}\n        </ListGroup>\n      </Card.Body>\n      <Card.Footer>\n        <Button block onClick={() => history.push(buildQueryURL())}>Build</Button>\n      </Card.Footer>\n    </Card>\n\n  const BuildList = listMapper(aggList, selectedItems || {}, (item) => toggleItemSelect(item))\n\n  return (\n    <div className=\"row w-100\">\n      <div className=\"col-md-3 col-sm-12\">\n        {SelectedCard}\n      </div>\n      <div className=\"col-md-6 col-sm-12 mt-4\">\n        <h1>What are you trying to build?</h1>\n        <InputGroup size=\"lg\">\n          <FormControl \n            aria-label=\"Large\"\n            aria-describedby=\"inputGroup-sizing-sm\" \n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => debouncedLookup(event.target.value)}\n          />\n        </InputGroup>\n        {Loading}\n        {BuildList}\n      </div>\n    </div>\n  )\n}\n\nexport default BuildingSearch","import { BuildType, CraftingMaterial, WeaponType, ArmorType, CharmType, RarityBuildType, CraftWithRarity } from \"./BuildTypes\";\nimport {getBuildTypeURL} from './useQuery'\nimport { parseWeaponResponse, parseArmorResponse, parseCharmResponse } from \"./ParseResponse\";\nimport { useState, useEffect } from \"react\";\nimport { compact } from \"lodash\";\n\nconst getDBItem = async <T>(type: BuildType, parsingFunction: (obj: any) => T, id: number): Promise<T> => {\n  const urlStart = getBuildTypeURL(type)\n  const url = urlStart.concat(`/${id}`)\n  const response = await fetch(url)\n  const json: any = await response.json()\n  return parsingFunction(json)\n}\n\nconst getWeapon = async (id: number) => await getDBItem<WeaponType>(BuildType.Weapon, parseWeaponResponse, id)\nconst getArmor = async (id: number) => await getDBItem<ArmorType>(BuildType.Armor, parseArmorResponse, id)\nconst getCharm = async (id: number) => await getDBItem<CharmType>(BuildType.Charm, parseCharmResponse, id)\n\nconst getWeaponTree = async (id: number, runningList: WeaponType[] = []): Promise<WeaponType[]> => {\n  const weapon = await getWeapon(id)\n  const previous = weapon.crafting.previous\n  const newList = [...runningList, weapon]\n  if (previous === null || weapon.crafting.craftable) {\n    return newList\n  }\n\n  return [...newList, ...await getWeaponTree(previous!, runningList)]\n}\n\nexport interface BuildStep {\n  gather: CraftingMaterial[]\n  build: number[]\n}\n\nexport type BuildPlan = BuildStep[]\n\nexport interface DetailedStep {\n  gather: CraftingMaterial[]\n  build: RarityBuildType[]\n}\n\nexport type DetailedBuildPlan = DetailedStep[]\n\nconst createSteps = (plan: BuildPlan, craftingList: [number, CraftingMaterial[]][]): BuildPlan => {\n  if (craftingList.length === 0) {\n    return plan\n  }\n  \n  const [[step, list], ...rest] = craftingList\n  const completionList = [step]  \n  const nameLut: MaterialInfoLookup = {}\n  const quantityTable: MaterialQuantityTable = {}\n\n  list.forEach((item: CraftingMaterial) => {\n    const id = item.itemID\n    nameLut[id] = item.itemName\n    quantityTable[id] = item.quantity\n  })\n\n  const newRest = rest.map(([currStep, list]): [number, CraftingMaterial[]] | null => {\n    const newList = list.map((material) => {\n      if (quantityTable[material.itemID]) {\n        quantityTable[material.itemID] += material.quantity\n        return undefined\n      }\n\n      return material\n    })\n\n    const compactedList = compact(newList)\n\n    if (compactedList.length === 0) {\n      completionList.push(currStep)\n      return null\n    }\n\n    return [currStep, compactedList]\n  })\n\n  const compactedRest = compact(newRest)\n\n  const finalBuildStepItems =  Object.keys(nameLut).map(id => Number(id)).map((id: number): CraftingMaterial => ({\n    itemID: id,\n    itemName: nameLut[id],\n    quantity: quantityTable[id]\n  }))\n\n  const buildStep: BuildStep = {\n    build: completionList,\n    gather: finalBuildStepItems\n  }\n\n  return createSteps([...plan, buildStep], compactedRest)\n}\n\nconst createGatherOrder = (materialTiers: CraftingMaterial[][]): BuildPlan => {\n  const tiers = [...materialTiers]\n  const firstCraftFirst = tiers.reverse()\n  const steppedMaterials = firstCraftFirst.map((item, index): [number, CraftingMaterial[]] => [index, item])\n  return createSteps([], steppedMaterials)\n}\n\nconst getMaterialPlan = async (builds: BuildEntry[]): Promise<DetailedBuildPlan> => {\n  // Weapons\n  const weaponBuilds = builds.filter((build) => build[0] === BuildType.Weapon)\n  const weaponIDs = weaponBuilds.map(build => build[1])\n  const weaponPromises = Promise.all(weaponIDs.map(async id => await getWeaponTree(id)))\n  const weaponTrees = await weaponPromises\n  const expandedWeaponTree = weaponTrees.length > 0 ? weaponTrees.reduce((prev, curr) => [...prev, ...curr]) : []\n  const weapons = expandedWeaponTree.map((weapon): CraftWithRarity => ({\n    id: weapon.id,\n    type: weapon.type,\n    name: weapon.name,\n    rarity: weapon.rarity,\n    crafting: weapon.crafting.craftingMaterials\n  }))\n  \n  // Armor\n  const armorBuilds = builds.filter((build) => build[0] === BuildType.Armor)\n  const armorIDs = armorBuilds.map(builds => builds[1])\n  const armorPromises = Promise.all(armorIDs.map(async id => await getArmor(id)))\n  const armorPieces = await armorPromises\n  const armors = armorPieces.map((armor): CraftWithRarity => ({\n    id: armor.id,\n    name: armor.name,\n    type: armor.type,\n    rarity: armor.rarity,\n    crafting: armor.crafting\n  }))\n\n  console.log(armors)\n  \n  // Charms\n  const charmBuilds = builds.filter((build) => build[0] === BuildType.Charm)\n  const charmIDs = charmBuilds.map(builds => builds[1])\n  const charmPromises = Promise.all(charmIDs.map(async id => await getCharm(id)))\n  const charmTrees = await charmPromises\n  const expandedTrees = charmTrees.map((tree) => tree.ranks.map((rank): CraftWithRarity => ({\n    id: tree.id,\n    name: tree.name,\n    rarity: rank.rarity,\n    type: BuildType.Charm,\n    crafting: rank.crafting\n  })))\n  const charms = expandedTrees.length > 0 ? expandedTrees.reduce((prev, curr) => [...prev, ...curr]) : []\n  \n  const expandedTree = [\n    ...weapons,\n    ...armors,\n    ...charms\n  ]\n\n  const raritySort = expandedTree.sort((a, b) => b.rarity - a.rarity)\n  const lengthSort = raritySort.sort((a, b) => b.crafting.length - a.crafting.length)\n  const materialSteps = lengthSort.map((tier) => tier.crafting)\n  const gatherOrder = createGatherOrder(materialSteps)\n  \n  const detailedPlan = gatherOrder.map((step, index): DetailedStep => ({\n    gather: step.gather,\n    build: step.build.map((id: number) => lengthSort[lengthSort.length - 1 - id])\n  }))\n\n  return detailedPlan\n}\n\ninterface MaterialQuantityTable {\n  [itemID: number]: number\n}\n\ninterface MaterialInfoLookup {\n  [itemID: number]: string\n}\n\ntype BuildBreakdownHook = [boolean, DetailedBuildPlan | undefined]\ntype BuildEntry = [BuildType, number]\n\nexport default (builds: BuildEntry[]): BuildBreakdownHook => {\n  const [loading, setLoading] = useState<boolean>(false)\n  const [result, setResult] = useState<DetailedBuildPlan>()\n\n  useEffect(() => {\n    const getMaterials = async () => {\n      console.log(builds)\n      const buildPlan = await getMaterialPlan(builds)\n      setResult(buildPlan)\n      setLoading(false)\n    }\n\n    if (!loading) {\n      setLoading(true)\n      getMaterials()\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) \n\n  return [loading, result]\n}","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { BuildType } from './lib/BuildTypes'\nimport useBuildBreakdown, { DetailedStep } from './lib/useBuildBreakdown'\nimport { Card, Row, Col, ListGroup } from 'react-bootstrap'\n\ninterface TypeLut {\n  [key: string]: BuildType\n}\n\nconst TYPE_LUT: TypeLut = {\n  'w': BuildType.Weapon,\n  'a': BuildType.Armor,\n  'c': BuildType.Charm\n}\n\ninterface BuildStepCardProps {\n  stepNum: number\n  step: DetailedStep\n}\n\nconst BuildStepCard = ({stepNum, step}: BuildStepCardProps) => {\n  return (\n    <Card className='my-3'>\n      <Card.Header>Step {stepNum}</Card.Header>\n      <Card.Body>\n        <Row>\n          <Col className={'text-left text-capitalize'}>\n            <h3>Gather</h3>\n            <ListGroup variant=\"flush\">\n              {step.gather.map((item) => <ListGroup.Item>{item.quantity}x {item.itemName}</ListGroup.Item>)}\n            </ListGroup>\n          </Col>\n          <Col className={'text-right'}>\n            <h3>Build</h3>\n            <ListGroup variant=\"flush\">\n              {step.build.map((item) => <ListGroup.Item>{item.name} | {item.rarity}</ListGroup.Item>)}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\n\nexport const BuildList = () => {\n  const { query } = useParams()\n  const individQueries = query.split('+')\n  const builds = individQueries.map((singleQuery: string): [BuildType, number] => [TYPE_LUT[singleQuery.charAt(0)], Number(singleQuery.substring(1))])\n\n  const [loading, buildPlan] = useBuildBreakdown(builds)\n\n  const stepCards = loading || !buildPlan ? null : buildPlan.map((step, index) => <BuildStepCard stepNum={index} step={step} />)\n\n  return (\n    <div className=\"container\">\n      {stepCards}\n    </div>\n  )\n}","import React from 'react'\nimport './App.scss'\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom'\nimport BuildingSearch from './BuildingSearch'\nimport { BuildList } from './BuildList'\n\nconst App = () => {\n  return (\n    <div className=\"App App-body\">\n      <Router>\n        <Switch>\n          <Route exact path='/mhw-farmhand/'>\n            <BuildingSearch />\n          </Route>\n          <Route path='/mhw-farmhand/:query'>\n            <BuildList />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}